{"version":3,"sources":["event/event-emitter.ts","option/responsive-map.ts","option/options.ts","tween.ts","stage.ts","ui/autoplay.ts","ui/buttons.ts","ui/dots.ts","ui/touch.ts","carousel.ts","index.ts"],"names":[],"mappings":"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","file":"latte-carousel.min.map","sourceRoot":"../src/ts","sourcesContent":["import { IListenerMap } from \"./listener-map\";\r\n\r\n/**\r\n * Basic event emitter implementation.\r\n *\r\n * @export\r\n * @class EventEmitter\r\n */\r\nexport class EventEmitter {\r\n    private listeners: IListenerMap = {};\r\n\r\n    /**\r\n     * Adds a new event listener.\r\n     *\r\n     * @param {string} event Event type.\r\n     * @param {(data?: any) => void} listener Event listener.\r\n     * @memberof EventEmitter\r\n     */\r\n    public on(event: string, listener: (data?: any) => void) {\r\n        let bucket = this.listeners[event];\r\n\r\n        if (bucket == null) {\r\n            this.listeners[event] = bucket = [];\r\n        }\r\n\r\n        bucket.push(listener);\r\n    }\r\n\r\n    /**\r\n     * Triggers all listeners by event type.\r\n     *\r\n     * @param {string} event Event type.\r\n     * @param {*} [data] Event data.\r\n     * @memberof EventEmitter\r\n     */\r\n    public trigger(event: string, data?: any) {\r\n        const bucket = this.listeners[event];\r\n\r\n        if (bucket != null) {\r\n            for (const listener of bucket) {\r\n                listener(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all listeners.\r\n     *\r\n     * @memberof EventEmitter\r\n     */\r\n    public off() {\r\n        this.listeners = {};\r\n    }\r\n}\r\n","import { Options } from \"./options\";\r\n\r\n/**\r\n * Responsive options map.\r\n *\r\n * @export\r\n * @class ResponsiveMap\r\n */\r\nexport class ResponsiveMap {\r\n    [breakpoint: string]: Options;\r\n\r\n    /**\r\n     * Creates an instance of ResponsiveMap.\r\n     * @param {ResponsiveMap} [map] Map to copy properties.\r\n     * @param {Options} [globalOptions] Options to use as default.\r\n     * @memberof ResponsiveMap\r\n     */\r\n    constructor(map?: ResponsiveMap, globalOptions?: Options) {\r\n        if (map == null) {\r\n            return;\r\n        }\r\n\r\n        // Instantiate options keeping global properties.\r\n        for (const breakpoint in map) {\r\n            if (map.hasOwnProperty(breakpoint)) {\r\n                const responsiveOptions = new Options((map as any)[breakpoint]);\r\n\r\n                // Copy from global options\r\n                if (globalOptions != null) {\r\n                    for (const prop in globalOptions) {\r\n                        if (\r\n                            globalOptions.hasOwnProperty(prop) &&\r\n                            prop !== \"responsive\" &&\r\n                            (map as any)[breakpoint][prop] == null\r\n                        ) {\r\n                            (responsiveOptions as any)[prop] = (globalOptions as any)[prop];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                (this as any)[breakpoint] = responsiveOptions;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { ResponsiveMap } from \"./responsive-map\";\r\n\r\n/**\r\n * Carousel options.\r\n *\r\n * @export\r\n * @class Options\r\n */\r\nexport class Options {\r\n    public count: number = 3;\r\n    public padding: number = 0;\r\n    public touch: boolean = false;\r\n    public buttons: boolean = true;\r\n    public dots: boolean = false;\r\n    public rewind: boolean = true;\r\n    public autoplay: number = 0;\r\n    public animation: number = 500;\r\n\r\n    public responsive: ResponsiveMap;\r\n\r\n    /**\r\n     * Creates an instance of Options.\r\n     * @param {Options} [options] Options to copy properties.\r\n     * @memberof Options\r\n     */\r\n    constructor(options?: Options) {\r\n        if (options == null) {\r\n            return;\r\n        }\r\n\r\n        for (const prop in options) {\r\n            if (options.hasOwnProperty(prop) && prop !== \"responsive\") {\r\n                (this as any)[prop] = (options as any)[prop];\r\n            }\r\n        }\r\n\r\n        // Copy responsive properties\r\n        if (options.responsive != null) {\r\n            this.responsive = new ResponsiveMap(options.responsive, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds options based on current breakpoint (screen width).\r\n     *\r\n     * @returns {Options} Carousel options.\r\n     * @memberof Options\r\n     */\r\n    public getBreakpointOptions(): Options {\r\n        if (this.responsive == null) {\r\n            return this;\r\n        }\r\n\r\n        // Get current screen width\r\n        const screenWidth = window.innerWidth || document.body.clientWidth;\r\n\r\n        // Find matched breakpoint option\r\n        let matchOption: Options = null;\r\n        let matchBreakpoint = 0;\r\n\r\n        for (const key in this.responsive) {\r\n            if (this.responsive.hasOwnProperty(key)) {\r\n                const option = this.responsive[key];\r\n                const breakpoint = parseInt(key, 10);\r\n\r\n                if (breakpoint >= matchBreakpoint && breakpoint <= screenWidth) {\r\n                    matchOption = option;\r\n                    matchBreakpoint = breakpoint;\r\n                }\r\n            }\r\n        }\r\n\r\n        return matchOption;\r\n    }\r\n}\r\n","export interface ITweenElement extends HTMLElement {\r\n    tweenId: number;\r\n}\r\n\r\n/**\r\n * Basic tweening implementation.\r\n *\r\n * @export\r\n * @class Tween\r\n */\r\nexport class Tween {\r\n    /**\r\n     * Translates the element to position.\r\n     *\r\n     * @static\r\n     * @param {HTMLElement} element Element to translate.\r\n     * @param {number} x X position.\r\n     * @param {number} y Y position.\r\n     * @param {number} duration Duration in millis.\r\n     * @memberof Tween\r\n     */\r\n    public static translate(element: HTMLElement, x: number, y: number, duration: number) {\r\n        const source = this.getTranslate(element);\r\n        const id = this.animationId++;\r\n\r\n        (element as ITweenElement).tweenId = id;\r\n\r\n        this.animate(duration, (progress) => {\r\n            if ((element as ITweenElement).tweenId !== id) {\r\n                return false;\r\n            }\r\n\r\n            const value = {\r\n                x: this.interpolate(source.x, x, progress),\r\n                y: this.interpolate(source.y, y, progress),\r\n            };\r\n\r\n            this.setTranslate(element, value);\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Unique animation ID.\r\n     *\r\n     * @private\r\n     * @static\r\n     * @type {number}\r\n     * @memberof Tween\r\n     */\r\n    private static animationId: number = 1;\r\n\r\n    /**\r\n     * Animates using callback loop.\r\n     *\r\n     * @private\r\n     * @static\r\n     * @param {number} duration Duration in millis.\r\n     * @param {(progress: number) => boolean} callback Animation callback. Must return true for animation to continue.\r\n     * @memberof Tween\r\n     */\r\n    private static animate(duration: number, callback: (progress: number) => boolean) {\r\n        if (duration === 0) {\r\n            callback(1);\r\n            return;\r\n        }\r\n\r\n        const start = new Date().getTime();\r\n\r\n        const loop = () => {\r\n            const now = new Date().getTime();\r\n            const relative = (now - start) / duration;\r\n            const progress = Math.min(relative, 1);\r\n\r\n            const shouldContinue = callback(progress);\r\n\r\n            if (progress < 1 && shouldContinue) {\r\n                this.requestFrame(loop);\r\n            }\r\n        };\r\n\r\n        this.requestFrame(loop);\r\n    }\r\n\r\n    /**\r\n     * Gets current translate value.\r\n     *\r\n     * @private\r\n     * @static\r\n     * @param {HTMLElement} element Element to get value.\r\n     * @returns {{ x: number, y: number }} Translate value.\r\n     * @memberof Tween\r\n     */\r\n    private static getTranslate(element: HTMLElement): { x: number; y: number } {\r\n        const source = { x: 0, y: 0 };\r\n\r\n        const regex = /translate\\(([0-9.-]+)px,\\s?([0-9.-]+)px\\)/;\r\n        const value = (element.style as any)[\"-ms-transform\"] || element.style.transform;\r\n\r\n        if (value != null) {\r\n            const match = regex.exec(value);\r\n\r\n            if (match != null) {\r\n                source.x = parseFloat(match[1]);\r\n                source.y = parseFloat(match[2]);\r\n            }\r\n        }\r\n\r\n        return source;\r\n    }\r\n\r\n    /**\r\n     * Sets translate value.\r\n     *\r\n     * @private\r\n     * @static\r\n     * @param {HTMLElement} element Element to set value.\r\n     * @param {{ x: number, y: number }} value Translate value.\r\n     * @memberof Tween\r\n     */\r\n    private static setTranslate(element: HTMLElement, value: { x: number; y: number }) {\r\n        const transform = `translate(${Math.ceil(value.x)}px, ${Math.ceil(value.y)}px)`;\r\n\r\n        (element.style as any)[\"-ms-transform\"] = transform;\r\n        element.style.transform = transform;\r\n    }\r\n\r\n    /**\r\n     * Request animation frame helper.\r\n     *\r\n     * @private\r\n     * @static\r\n     * @param {() => void} callback Animation frame callback.\r\n     * @memberof Tween\r\n     */\r\n    private static requestFrame(callback: () => void) {\r\n        if (requestAnimationFrame != null) {\r\n            requestAnimationFrame(callback);\r\n        } else {\r\n            window.setTimeout(callback, 1000 / 60);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interpolates two numbers.\r\n     *\r\n     * @private\r\n     * @static\r\n     * @param {number} source Source value.\r\n     * @param {number} dest Destination value.\r\n     * @param {number} amount Percentage.\r\n     * @returns {number} Interpolated value.\r\n     * @memberof Tween\r\n     */\r\n    private static interpolate(source: number, dest: number, amount: number): number {\r\n        return this.easeOutCubic(amount, source, dest - source, 1);\r\n    }\r\n\r\n    /**\r\n     * Cubic easing out function.\r\n     * Inspired from: http://robertpenner.com/easing/penner_easing_as1.txt\r\n     *\r\n     * @private\r\n     * @static\r\n     * @param {number} t Time.\r\n     * @param {number} b Base value.\r\n     * @param {number} c Change in value.\r\n     * @param {number} d Duration.\r\n     * @returns {number} Interpolated value.\r\n     * @memberof Tween\r\n     */\r\n    private static easeOutCubic(t: number, b: number, c: number, d: number): number {\r\n        return c * ((t = t / d - 1) * t * t + 1) + b;\r\n    }\r\n}\r\n","import { EventEmitter } from \"./event/event-emitter\";\r\nimport { Options } from \"./option/options\";\r\nimport { Tween } from \"./tween\";\r\n\r\n/**\r\n * Base carousel stage.\r\n *\r\n * @export\r\n * @class Stage\r\n * @extends {EventEmitter}\r\n */\r\nexport class Stage extends EventEmitter {\r\n    private currentOptions: Options;\r\n\r\n    private currentIndex: number = 0;\r\n    private currentPosition: number = 0;\r\n\r\n    private contentSize: number;\r\n    private stageSize: number;\r\n    private itemSize: number;\r\n\r\n    /**\r\n     * Creates an instance of Stage.\r\n     * @param {HTMLElement} contentElement Content element.\r\n     * @param {HTMLElement} stageElement Stage element.\r\n     * @param {HTMLCollection} itemElements Items elements.\r\n     * @param {Options} options Carousel options.\r\n     * @memberof Stage\r\n     */\r\n    constructor(\r\n        private contentElement: HTMLElement,\r\n        private stageElement: HTMLElement,\r\n        private itemElements: HTMLCollection,\r\n        private options: Options,\r\n    ) {\r\n        super();\r\n\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Updates stage computing options and position.\r\n     *\r\n     * @memberof Stage\r\n     */\r\n    public update() {\r\n        this.currentOptions = this.options.getBreakpointOptions();\r\n\r\n        // Compute size\r\n        this.contentSize = this.contentElement.getBoundingClientRect().width;\r\n        this.itemSize = this.contentSize / this.currentOptions.count;\r\n        this.stageSize = this.itemSize * this.itemElements.length;\r\n\r\n        // Apply size\r\n        for (let i = 0; i < this.itemElements.length; i++) {\r\n            const itemElement = this.itemElements[i] as HTMLElement;\r\n\r\n            itemElement.style.width = this.itemSize + \"px\";\r\n        }\r\n\r\n        this.stageElement.style.width = this.stageSize + \"px\";\r\n\r\n        // Adjust position\r\n        this.move(0, false);\r\n    }\r\n\r\n    /**\r\n     * Moves stage to relative index.\r\n     *\r\n     * @param {number} delta Index delta.\r\n     * @param {boolean} [tween=true] Use tweening\r\n     * @memberof Stage\r\n     */\r\n    public move(delta: number, tween: boolean = true) {\r\n        this.moveTo(this.currentIndex + delta, tween);\r\n    }\r\n\r\n    /**\r\n     * Moves stage to absolute index.\r\n     *\r\n     * @param {number} index Index.\r\n     * @param {boolean} [tween=true] Use tweening\r\n     * @memberof Stage\r\n     */\r\n    public moveTo(index: number, tween: boolean = true) {\r\n        const firstIndex = 0;\r\n        const lastIndex = this.last();\r\n\r\n        // Rewind index\r\n        if (this.currentOptions.rewind) {\r\n            index = index % (lastIndex + 1);\r\n\r\n            if (index < 0) {\r\n                index = lastIndex + 1 + index;\r\n            }\r\n        }\r\n\r\n        // Compute position by index\r\n        this.currentIndex = index;\r\n        this.currentIndex = Math.min(Math.max(firstIndex, this.currentIndex), lastIndex);\r\n        this.currentPosition = this.currentIndex * this.itemSize * -1;\r\n\r\n        const duration = tween ? this.currentOptions.animation : 0;\r\n        Tween.translate(this.stageElement, this.currentPosition, 0, duration);\r\n\r\n        this.trigger(\"move\");\r\n    }\r\n\r\n    /**\r\n     * Drags stage to relative position.\r\n     *\r\n     * @param {number} delta Position delta.\r\n     * @memberof Stage\r\n     */\r\n    public drag(delta: number) {\r\n        const lastIndex = this.last();\r\n\r\n        const firstPosition = 0;\r\n        const lastPosition = lastIndex * this.itemSize * -1;\r\n\r\n        // Change position only\r\n        this.currentPosition += delta;\r\n        this.currentPosition = Math.min(Math.max(lastPosition, this.currentPosition), firstPosition);\r\n\r\n        Tween.translate(this.stageElement, this.currentPosition, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Finishes carousel drag.\r\n     *\r\n     * @param {boolean} movedLeft If carousel moved to the left.\r\n     * @memberof Stage\r\n     */\r\n    public dragEnd(movedLeft: boolean) {\r\n        // Compute index by position\r\n        if (movedLeft) {\r\n            this.currentIndex = Math.ceil(Math.abs(this.currentPosition) / this.itemSize);\r\n        } else {\r\n            this.currentIndex = Math.floor(Math.abs(this.currentPosition) / this.itemSize);\r\n        }\r\n\r\n        this.move(0);\r\n    }\r\n\r\n    /**\r\n     * Returns carousel item count.\r\n     *\r\n     * @returns {number} Item count.\r\n     * @memberof Stage\r\n     */\r\n    public count(): number {\r\n        return this.itemElements.length;\r\n    }\r\n\r\n    /**\r\n     * Returns current index.\r\n     *\r\n     * @returns {number} Current index.\r\n     * @memberof Stage\r\n     */\r\n    public current(): number {\r\n        return this.currentIndex;\r\n    }\r\n\r\n    /**\r\n     * Returns last index.\r\n     *\r\n     * @returns {number} Last index.\r\n     * @memberof Stage\r\n     */\r\n    public last(): number {\r\n        return Math.max(0, this.itemElements.length - this.currentOptions.count);\r\n    }\r\n}\r\n","import { Options } from \"../option/options\";\r\nimport { Stage } from \"../stage\";\r\n\r\n/**\r\n * Carousel autoplay.\r\n *\r\n * @export\r\n * @class Autoplay\r\n */\r\nexport class Autoplay {\r\n    private currentOptions: Options;\r\n\r\n    private intervalId: number = 0;\r\n    private mouseOver: boolean = false;\r\n\r\n    /**\r\n     * Creates an instance of Autoplay.\r\n     * @param {HTMLElement} contentElement Content element.\r\n     * @param {Stage} stage Carousel stage.\r\n     * @param {Options} options Carousel options.\r\n     * @memberof Autoplay\r\n     */\r\n    constructor(private contentElement: HTMLElement, private stage: Stage, private options: Options) {\r\n        this.contentElement.addEventListener(\"mouseenter\", this.onMouseEnter.bind(this));\r\n        this.contentElement.addEventListener(\"mouseleave\", this.onMouseLeave.bind(this));\r\n\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Updates carousel autoplay.\r\n     *\r\n     * @memberof Autoplay\r\n     */\r\n    public update() {\r\n        this.currentOptions = this.options.getBreakpointOptions();\r\n\r\n        // Clear current interval\r\n        if (this.intervalId > 0) {\r\n            clearInterval(this.intervalId);\r\n        }\r\n\r\n        if (this.currentOptions.autoplay > 0) {\r\n            this.intervalId = window.setInterval(this.onInterval.bind(this), this.currentOptions.autoplay);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes autoplay.\r\n     *\r\n     * @memberof Autoplay\r\n     */\r\n    public remove() {\r\n        if (this.intervalId > 0) {\r\n            clearInterval(this.intervalId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interval listener.\r\n     *\r\n     * @private\r\n     * @memberof Autoplay\r\n     */\r\n    private onInterval() {\r\n        if (!this.mouseOver) {\r\n            this.stage.move(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mouse enter listener.\r\n     *\r\n     * @private\r\n     * @memberof Autoplay\r\n     */\r\n    private onMouseEnter() {\r\n        this.mouseOver = true;\r\n    }\r\n\r\n    /**\r\n     * Mouse leave listener.\r\n     *\r\n     * @private\r\n     * @memberof Autoplay\r\n     */\r\n    private onMouseLeave() {\r\n        this.mouseOver = false;\r\n    }\r\n}\r\n","import { Options } from \"../option/options\";\r\nimport { Stage } from \"../stage\";\r\n\r\n/**\r\n * Carousel buttons.\r\n *\r\n * @export\r\n * @class Buttons\r\n */\r\nexport class Buttons {\r\n    private currentOptions: Options;\r\n\r\n    private previousButton: HTMLElement;\r\n    private nextButton: HTMLElement;\r\n\r\n    /**\r\n     * Creates an instance of Buttons.\r\n     * @param {HTMLElement} carouselElement Carousel element.\r\n     * @param {HTMLElement} contentElement Content element.\r\n     * @param {Stage} stage Carousel stage.\r\n     * @param {Options} options Carousel options.\r\n     * @memberof Buttons\r\n     */\r\n    constructor(\r\n        private carouselElement: HTMLElement,\r\n        private contentElement: HTMLElement,\r\n        private stage: Stage,\r\n        private options: Options,\r\n    ) {\r\n        this.previousButton = this.createButton(\"latte-previous\");\r\n        this.nextButton = this.createButton(\"latte-next\");\r\n\r\n        this.carouselElement.insertBefore(this.previousButton, this.contentElement);\r\n        this.carouselElement.appendChild(this.nextButton);\r\n\r\n        this.previousButton.addEventListener(\"click\", this.onPreviousClick.bind(this));\r\n        this.nextButton.addEventListener(\"click\", this.onNextClick.bind(this));\r\n\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Updates carousel buttons.\r\n     *\r\n     * @memberof Buttons\r\n     */\r\n    public update() {\r\n        this.currentOptions = this.options.getBreakpointOptions();\r\n\r\n        if (this.currentOptions.buttons === true) {\r\n            this.previousButton.className = \"latte-previous\";\r\n            this.nextButton.className = \"latte-next\";\r\n        } else {\r\n            this.previousButton.className = \"latte-previous invisible\";\r\n            this.nextButton.className = \"latte-next invisible\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new button.\r\n     *\r\n     * @private\r\n     * @param {string} clazz Element class.\r\n     * @returns {HTMLElement} Element created.\r\n     * @memberof Buttons\r\n     */\r\n    private createButton(clazz: string): HTMLElement {\r\n        const element = document.createElement(\"div\");\r\n        element.className = clazz;\r\n\r\n        return element;\r\n    }\r\n\r\n    /**\r\n     * Previous click listener.\r\n     *\r\n     * @private\r\n     * @param {MouseEvent} event Mouse event.\r\n     * @memberof Buttons\r\n     */\r\n    private onPreviousClick(event: MouseEvent) {\r\n        this.stage.move(-1);\r\n    }\r\n\r\n    /**\r\n     * Next click listener.\r\n     *\r\n     * @private\r\n     * @param {MouseEvent} event Mouse event.\r\n     * @memberof Buttons\r\n     */\r\n    private onNextClick(event: MouseEvent) {\r\n        this.stage.move(1);\r\n    }\r\n}\r\n","import { Options } from \"../option/options\";\r\nimport { Stage } from \"../stage\";\r\n\r\n/**\r\n * Carousel navigation dots.\r\n *\r\n * @export\r\n * @class Dots\r\n */\r\nexport class Dots {\r\n    private currentOptions: Options;\r\n\r\n    private dotsContainer: HTMLElement;\r\n    private dots: NodeListOf<HTMLElement>;\r\n\r\n    /**\r\n     * Creates an instance of Dots.\r\n     * @param {HTMLElement} carouselElement Carousel element.\r\n     * @param {Stage} stage Carousel stage.\r\n     * @param {Options} options Carousel options.\r\n     * @memberof Dots\r\n     */\r\n    constructor(private carouselElement: HTMLElement, private stage: Stage, private options: Options) {\r\n        this.createContainer();\r\n\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Updates carousel dots.\r\n     *\r\n     * @memberof Dots\r\n     */\r\n    public update() {\r\n        this.currentOptions = this.options.getBreakpointOptions();\r\n\r\n        if (this.currentOptions.dots === true) {\r\n            this.dotsContainer.className = \"latte-dots\";\r\n\r\n            this.createDots();\r\n\r\n            this.updateActive();\r\n        } else {\r\n            this.dotsContainer.className = \"latte-dots invisible\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates the dots container.\r\n     *\r\n     * @private\r\n     * @memberof Dots\r\n     */\r\n    private createContainer() {\r\n        this.dotsContainer = document.createElement(\"div\");\r\n        this.dotsContainer.className = \"latte-dots\";\r\n\r\n        this.carouselElement.appendChild(this.dotsContainer);\r\n    }\r\n\r\n    /**\r\n     * Creates the dots itself.\r\n     *\r\n     * @private\r\n     * @memberof Dots\r\n     */\r\n    private createDots() {\r\n        const count = this.dotCount();\r\n\r\n        // Avoid recreation\r\n        if (this.dots != null && this.dots.length === count) {\r\n            return;\r\n        }\r\n\r\n        // Build elements\r\n        let html = \"\";\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            let index = i * Math.ceil(this.currentOptions.count);\r\n            index = Math.min(index, this.stage.last());\r\n\r\n            html += `<div class=\"latte-dot\" data-index=${index}></div>`;\r\n        }\r\n\r\n        this.dotsContainer.innerHTML = html;\r\n\r\n        this.dots = this.dotsContainer.querySelectorAll(\".latte-dot\");\r\n\r\n        // Add events\r\n        for (let i = 0; i < this.dots.length; i++) {\r\n            const dot = this.dots[i];\r\n\r\n            dot.addEventListener(\"click\", this.onDotClick.bind(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the active navigation dot.\r\n     *\r\n     * @private\r\n     * @memberof Dots\r\n     */\r\n    private updateActive() {\r\n        for (let i = 0; i < this.dots.length; i++) {\r\n            // Index bounds\r\n            const dot = this.dots[i];\r\n            const index = parseFloat(dot.getAttribute(\"data-index\"));\r\n\r\n            let nextIndex;\r\n            if (i + 1 < this.dots.length) {\r\n                const nextDot = this.dots[i + 1];\r\n                nextIndex = parseFloat(nextDot.getAttribute(\"data-index\"));\r\n            }\r\n\r\n            // Active class\r\n            const active = this.stage.current() >= index && (nextIndex == null || this.stage.current() < nextIndex);\r\n\r\n            const clazz = \"latte-dot\" + (active ? \" active\" : \"\");\r\n\r\n            dot.setAttribute(\"class\", clazz);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns navigation dot count.\r\n     *\r\n     * @private\r\n     * @returns {number} Dot count.\r\n     * @memberof Dots\r\n     */\r\n    private dotCount(): number {\r\n        return Math.ceil(this.stage.count() / Math.ceil(this.currentOptions.count));\r\n    }\r\n\r\n    /**\r\n     * Dot click listener.\r\n     *\r\n     * @private\r\n     * @param {MouseEvent} event Mouse event.\r\n     * @memberof Dots\r\n     */\r\n    private onDotClick(event: MouseEvent) {\r\n        const dot = event.target as HTMLElement;\r\n        const index = parseFloat(dot.getAttribute(\"data-index\"));\r\n\r\n        this.stage.moveTo(index);\r\n\r\n        this.updateActive();\r\n    }\r\n}\r\n","import { Options } from \"../option/options\";\r\nimport { Stage } from \"../stage\";\r\n\r\n/**\r\n * Touch support.\r\n *\r\n * @export\r\n * @class Touch\r\n */\r\nexport class Touch {\r\n    private currentOptions: Options;\r\n\r\n    private firstX = 0;\r\n    private previousX = 0;\r\n    private previousY = 0;\r\n\r\n    private distanceX = 0;\r\n    private distanceY = 0;\r\n    private minDistance = 20;\r\n\r\n    private state: \"free\" | \"drag\" | \"lock\" = \"free\";\r\n\r\n    /**\r\n     * Creates an instance of Touch.\r\n     * @param {HTMLElement} contentElement Content element.\r\n     * @param {Stage} stage Carousel stage.\r\n     * @param {Options} options Carousel options.\r\n     * @memberof Touch\r\n     */\r\n    constructor(private contentElement: HTMLElement, private stage: Stage, private options: Options) {\r\n        this.contentElement.addEventListener(\"touchstart\", this.onTouchStart.bind(this), { passive: true });\r\n        this.contentElement.addEventListener(\"touchmove\", this.onTouchMove.bind(this));\r\n        this.contentElement.addEventListener(\"touchend\", this.onTouchEnd.bind(this), { passive: true });\r\n\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Updates touch support.\r\n     *\r\n     * @memberof Touch\r\n     */\r\n    public update() {\r\n        this.currentOptions = this.options.getBreakpointOptions();\r\n    }\r\n\r\n    /**\r\n     * Touch start listener.\r\n     *\r\n     * @private\r\n     * @param {TouchEvent} event Touch event.\r\n     * @memberof Touch\r\n     */\r\n    private onTouchStart(event: TouchEvent) {\r\n        const touch = event.touches[0];\r\n\r\n        this.firstX = this.previousX = touch.clientX;\r\n        this.previousY = touch.clientY;\r\n\r\n        this.distanceX = this.distanceY = 0;\r\n    }\r\n\r\n    /**\r\n     * Touch move listener.\r\n     *\r\n     * @private\r\n     * @param {TouchEvent} event Touch event.\r\n     * @memberof Touch\r\n     */\r\n    private onTouchMove(event: TouchEvent) {\r\n        const touch = event.touches[0];\r\n\r\n        const deltaX = touch.clientX - this.previousX;\r\n        const deltaY = touch.clientY - this.previousY;\r\n\r\n        this.distanceX += Math.abs(deltaX);\r\n        this.distanceY += Math.abs(deltaY);\r\n\r\n        const dragDistance = this.distanceX > this.minDistance || this.distanceY > this.minDistance;\r\n        const horizontalDrag = this.distanceX > this.distanceY;\r\n\r\n        if (this.currentOptions.touch) {\r\n            // Check for minimum distance and horizontal drag\r\n            if (this.state === \"free\" && dragDistance) {\r\n                if (horizontalDrag) {\r\n                    this.state = \"drag\";\r\n                } else {\r\n                    this.state = \"lock\";\r\n                }\r\n            }\r\n\r\n            // Lock scroll on touch move\r\n            if (this.state === \"drag\") {\r\n                if (event.cancelable) {\r\n                    event.preventDefault();\r\n                }\r\n\r\n                this.stage.drag(deltaX);\r\n            }\r\n        }\r\n\r\n        this.previousX = touch.clientX;\r\n        this.previousY = touch.clientY;\r\n    }\r\n\r\n    /**\r\n     * Touch end listener.\r\n     *\r\n     * @private\r\n     * @param {TouchEvent} event Touch event.\r\n     * @memberof Touch\r\n     */\r\n    private onTouchEnd(event: TouchEvent) {\r\n        const movedLeft = this.firstX > this.previousX;\r\n\r\n        // Prevent disabling touch while dragging\r\n        if (this.currentOptions.touch || this.state === \"drag\") {\r\n            this.state = \"free\";\r\n\r\n            this.stage.dragEnd(movedLeft);\r\n        }\r\n    }\r\n}\r\n","import { EventEmitter } from \"./event/event-emitter\";\r\nimport { Options } from \"./option/options\";\r\nimport { Stage } from \"./stage\";\r\nimport { Autoplay } from \"./ui/autoplay\";\r\nimport { Buttons } from \"./ui/buttons\";\r\nimport { Dots } from \"./ui/dots\";\r\nimport { Touch } from \"./ui/touch\";\r\n\r\n// tslint:disable-next-line\r\nrequire(\"../scss/style.scss\");\r\n\r\n/**\r\n * Base carousel class.\r\n *\r\n * @export\r\n * @class Carousel\r\n * @extends {EventEmitter}\r\n */\r\nexport class Carousel extends EventEmitter {\r\n    private carouselElement: HTMLElement;\r\n    private contentElement: HTMLElement;\r\n    private stageElement: HTMLElement;\r\n    private itemElements: HTMLCollection;\r\n\r\n    private options: Options;\r\n    private stage: Stage;\r\n    private touch: Touch;\r\n    private buttons: Buttons;\r\n    private dots: Dots;\r\n    private autoplay: Autoplay;\r\n\r\n    private originalHtml: string;\r\n\r\n    private onWindowResizeListener: (event: UIEvent) => void;\r\n\r\n    /**\r\n     * Creates an instance of Carousel.\r\n     * @param {(string | HTMLElement)} elementOrSelector Root carousel element or selector.\r\n     * @param {Options} [options] Carousel options.\r\n     * @memberof Carousel\r\n     */\r\n    constructor(elementOrSelector: string | HTMLElement, options?: Options) {\r\n        super();\r\n\r\n        if (typeof elementOrSelector === \"string\") {\r\n            this.carouselElement = document.querySelector(elementOrSelector);\r\n        } else {\r\n            this.carouselElement = elementOrSelector;\r\n        }\r\n\r\n        if (this.carouselElement == null) {\r\n            throw new Error(\"Missing root latte-carousel element.\");\r\n        }\r\n\r\n        if (this.carouselElement.querySelector(\".latte-content\") != null) {\r\n            throw new Error(\"Cannot create multiple instances using the same latte-carousel element.\");\r\n        }\r\n\r\n        this.originalHtml = this.carouselElement.innerHTML;\r\n\r\n        this.createContainers();\r\n\r\n        this.contentElement = this.carouselElement.children[0] as HTMLElement;\r\n        this.stageElement = this.contentElement.children[0] as HTMLElement;\r\n        this.itemElements = this.stageElement.children;\r\n\r\n        this.options = new Options(options);\r\n        this.stage = new Stage(this.contentElement, this.stageElement, this.itemElements, this.options);\r\n        this.touch = new Touch(this.contentElement, this.stage, this.options);\r\n        this.buttons = new Buttons(this.carouselElement, this.contentElement, this.stage, this.options);\r\n        this.dots = new Dots(this.carouselElement, this.stage, this.options);\r\n        this.autoplay = new Autoplay(this.contentElement, this.stage, this.options);\r\n\r\n        this.onWindowResizeListener = this.onWindowResize.bind(this);\r\n\r\n        window.addEventListener(\"resize\", this.onWindowResizeListener);\r\n\r\n        this.stage.on(\"move\", this.onStageMove.bind(this));\r\n\r\n        this.update();\r\n\r\n        this.on(\"previous\", this.onCarouselPrevious.bind(this));\r\n        this.on(\"next\", this.onCarouselNext.bind(this));\r\n        this.on(\"goto\", this.onCarouselGoto.bind(this));\r\n        this.on(\"update\", this.onCarouselUpdate.bind(this));\r\n        this.on(\"remove\", this.onCarouselRemove.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Removes carousel.\r\n     *\r\n     * @memberof Carousel\r\n     */\r\n    public remove() {\r\n        this.autoplay.remove();\r\n\r\n        window.removeEventListener(\"resize\", this.onWindowResizeListener);\r\n\r\n        this.off();\r\n\r\n        this.carouselElement.innerHTML = this.originalHtml;\r\n    }\r\n\r\n    /**\r\n     * Creates content and stage containers.\r\n     *\r\n     * @private\r\n     * @memberof Carousel\r\n     */\r\n    private createContainers() {\r\n        this.carouselElement.innerHTML = `\r\n            <div class=\"latte-content\">\r\n                <div class=\"latte-stage\">\r\n                    ${this.carouselElement.innerHTML}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    /**\r\n     * Updates carousel.\r\n     *\r\n     * @private\r\n     * @memberof Carousel\r\n     */\r\n    private update() {\r\n        this.stage.update();\r\n\r\n        this.touch.update();\r\n\r\n        this.buttons.update();\r\n\r\n        this.dots.update();\r\n\r\n        this.autoplay.update();\r\n    }\r\n\r\n    /**\r\n     * Window resize listener.\r\n     *\r\n     * @private\r\n     * @param {UIEvent} event UI Event.\r\n     * @memberof Carousel\r\n     */\r\n    private onWindowResize(event: UIEvent) {\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Stage move listener.\r\n     *\r\n     * @private\r\n     * @param {*} data Event data.\r\n     * @memberof Carousel\r\n     */\r\n    private onStageMove(data: any) {\r\n        this.dots.update();\r\n    }\r\n\r\n    /**\r\n     * Carousel previous listener.\r\n     *\r\n     * @private\r\n     * @param {*} data Event data.\r\n     * @memberof Carousel\r\n     */\r\n    private onCarouselPrevious(data: any) {\r\n        this.stage.move(-1);\r\n    }\r\n\r\n    /**\r\n     * Carousel next listener.\r\n     *\r\n     * @private\r\n     * @param {*} data Event data.\r\n     * @memberof Carousel\r\n     */\r\n    private onCarouselNext(data: any) {\r\n        this.stage.move(1);\r\n    }\r\n\r\n    /**\r\n     * Carousel goto listener.\r\n     *\r\n     * @private\r\n     * @param {*} data Event data.\r\n     * @memberof Carousel\r\n     */\r\n    private onCarouselGoto(data: any) {\r\n        this.stage.moveTo(data as number);\r\n    }\r\n\r\n    /**\r\n     * Carousel update listener.\r\n     *\r\n     * @private\r\n     * @param {*} data Event data.\r\n     * @memberof Carousel\r\n     */\r\n    private onCarouselUpdate(data: any) {\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Carousel remove listener.\r\n     *\r\n     * @private\r\n     * @param {*} data Event data.\r\n     * @memberof Carousel\r\n     */\r\n    private onCarouselRemove(data: any) {\r\n        this.remove();\r\n    }\r\n}\r\n","export { Carousel } from \"./carousel\";\r\nexport { Options } from \"./option/options\";\r\nexport { ResponsiveMap } from \"./option/responsive-map\";\r\n"]}